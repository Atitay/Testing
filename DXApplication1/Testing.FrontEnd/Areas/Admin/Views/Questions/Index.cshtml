<div class="row">
    <div class="col-sm pb-4">
        <br />
        <h3 class="text-secondary ">Question List</h3>
        <br />
        @using Testing.Models
        @model Testing.Models.Question
        @(Html.DevExtreme()
            .DataGrid<Testing.Models.Question>()
                .DataSource(d => d.Mvc()
                .Controller("Questions")
                .LoadAction("Get")
                .UpdateAction("Put")
                .InsertAction("Post")
                .DeleteAction("Delete")
                .Area("Admin")
                .Key("QuestionId")
                )

           .ID("gridContainer")

           .Editing(editing =>
           {
               editing.Mode(GridEditMode.Form);
               editing.AllowAdding(true).UseIcons(true);
               editing.AllowDeleting(true);
               editing.AllowUpdating(true);
           })
           .FilterRow(filterRow => filterRow.Visible(true).ApplyFilter(GridApplyFilterMode.Auto))
           .SearchPanel(searchPanel => searchPanel.Visible(true).Width(240).Placeholder("Search..."))

            .Paging(paging => paging.Enabled(true).PageSize(10))

           .ShowBorders(true)
           .HeaderFilter(headerFilter => headerFilter.Visible(true))
           .Selection(s => s.Mode(SelectionMode.Single))
           .HoverStateEnabled(true)

           .Columns(columns =>
           {
               columns.AddFor(m => m.QuestionString).Caption("Question")
               .FormItem(i => i.Editor(e => e.TextArea().Height(100)));

               columns.AddFor(m => m.Point).Visible(false)
               .FormItem(i => i.Editor(e => e.Slider().ID("handler-slider").Max(100).Min(0)
               .Step(2)
               .Tooltip(t => t.Enabled(true))));


               columns.AddFor(m => m.TopicId).Caption("Topic Name")
               .Lookup(lookup => lookup
               .DataSource(d => d.Mvc().Controller("Questions").LoadAction("GetTopic").Key("TopicId"))
               .DisplayExpr("TopicName")
               .ValueExpr("TopicId"))

    .FormItem(i => i
        .Editor(e => e.Lookup()
        .DataSource(d => d.Mvc().Controller("Questions").LoadAction("GetTopic").Key("TopicId"))
        .DisplayExpr("TopicName")
        .ValueExpr("TopicId")
        )

    //.FormItem(i => i
    //.Editor(e => e.DropDownBox()
    //.ID("TopicId")
    //.DropDownOptions(o => o.Height(250))
    //.DataSource(d => d.Mvc().Controller("Questions").LoadAction("GetTopic").Key("TopicId"))
    //.DisplayExpr("TopicName")
    //.ValueExpr("TopicId")
    //.ShowClearButton(true)
    //.OnValueChanged("treeBox_valueChanged")
    //.ContentTemplate(new TemplateName("EmbeddedTreeViewSingle"))
    //)
    );

               columns.AddFor(m => m.QuestionType).Caption("Question Type").Visible(false)
               .Lookup(lookup => lookup
               .DataSource(Html.GetEnumSelectList<QuestionType>()
               .Select(t => new { Value = int.Parse(t.Value), Text = t.Text }))
               .ValueExpr("Value")
               .DisplayExpr("Text"))
               .FormItem(i => i
               .Editor(e => e.SelectBox()
               .ID("QuestionType")
               .DataSource(Html.GetEnumSelectList<QuestionType>()
               .Select(t => new { Value = int.Parse(t.Value), Text = t.Text }))
               .ValueExpr("Value")
               .DisplayExpr("Text"))
               );

               columns.AddFor(m => m.QuestionLevel).Caption("Question Level").Visible(false)
               .Lookup(lookup => lookup
               .DataSource(Html.GetEnumSelectList<QuestionLevel>()
               .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
               .ValueExpr("Value")
               .DisplayExpr("Text"))
               .FormItem(i => i
               .Editor(e => e.SelectBox()
               .ID("QuestionLevel")
               .DataSource(Html.GetEnumSelectList<QuestionLevel>()

               .Select(l => new { Value = int.Parse(l.Value), Text = l.Text }))
               .ValueExpr("Value")
               .DisplayExpr("Text"))
               );


           }

)
.OnCellDblClick("selection_changed")

        )

        
        <script>
            function selection_changed(e) {
                if (e.data.QuestionId != null) {
                    window.location.href = "/Admin/Question/Index/" + e.data.QuestionId;
                }
            }
            function slider_valueChanged(data) {
                $("#slider-value").dxNumberBox("instance").option("value", data.value);
            }

            function numberBox_valueChanged(data) {
                $("#handler-slider").dxSlider("instance").option("value", data.value);
            }
        </script>

        @*tree view*@
        @using (Html.DevExtreme().NamedTemplate("EmbeddedTreeViewSingle"))
        {
            @(Html.DevExtreme().TreeView()
            .DataSource(d => d.Mvc().Controller("Questions").LoadAction("GetTopic").Key("TopicId"))
            .KeyExpr("TopicId")
            .DisplayExpr("TopicName")
            .ParentIdExpr("ParentId")
            .DataStructure(TreeViewDataStructure.Plain)
            .SelectionMode(NavSelectionMode.Single)
            .SelectByClick(true)
            .Height(235)
            .OnItemSelectionChanged(
                                                                                                        @<text>
                                                                                                            function(args) {
                                                                                                            var nodes = args.component.getNodes(),
                                                                                                            value = getSelectedItemsKeys(nodes);

                                                                                                            component.option("value", value);
                                                                                                            }
                                                                                                        </text>)

                       .OnContentReady(
text>
function(args) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                syncTreeViewSelection(args.component, component.option("value"));
}
text>)
            )
        }

        <script>
            //Func tree view box
            function syncTreeViewSelection(treeView, value) {
                if (!value) {
                    treeView.unselectAll();
                    return;
                }
                value.forEach(function (key) {
                    treeView.selectItem(key);
                });
            }
            function getSelectedItemsKeys(items) {
                var result = [];
                items.forEach(function (item) {
                    if (item.selected) {
                        result.push(item.key);
                    }
                    if (item.items.length) {
                        result = result.concat(getSelectedItemsKeys(item.items));
                    }
                });
                return result;
            }
            function treeBox_valueChanged(e) {
                var $treeView = e.component.content().find(".dx-treeview");
                if ($treeView.length) {
                    syncTreeViewSelection($treeView.dxTreeView("instance"), e.value);
                }
            }

        </script>

    </div>
    <div class="bg-white">&nbsp; &nbsp;&nbsp;</div>
    <div class="col-sm-3" style="background-color:#efdfdf">
    </div>
</div>

